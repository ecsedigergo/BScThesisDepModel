/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.ide.contentassist.antlr;

import com.google.inject.Inject;
import hu.bme.mit.ide.contentassist.antlr.internal.InternalDepModelParser;
import hu.bme.mit.services.DepModelGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class DepModelParser extends AbstractContentAssistParser {

	@Inject
	private DepModelGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDepModelParser createParser() {
		InternalDepModelParser result = new InternalDepModelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
					put(grammarAccess.getComponentModelDecAccess().getAlternatives(), "rule__ComponentModelDec__Alternatives");
					put(grammarAccess.getSysFeaturesDecAccess().getAlternatives(), "rule__SysFeaturesDec__Alternatives");
					put(grammarAccess.getSystemPortDecAccess().getAlternatives(), "rule__SystemPortDec__Alternatives");
					put(grammarAccess.getComponentFeaturesDecAccess().getAlternatives(), "rule__ComponentFeaturesDec__Alternatives");
					put(grammarAccess.getPortDecAccess().getAlternatives(), "rule__PortDec__Alternatives");
					put(grammarAccess.getErrorModelElementAccess().getAlternatives(), "rule__ErrorModelElement__Alternatives");
					put(grammarAccess.getTransitionFeatureDecAccess().getAlternatives(), "rule__TransitionFeatureDec__Alternatives");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getPortTypeAccess().getGroup(), "rule__PortType__Group__0");
					put(grammarAccess.getErrorModesAccess().getGroup(), "rule__ErrorModes__Group__0");
					put(grammarAccess.getSystemConnDecAccess().getGroup(), "rule__SystemConnDec__Group__0");
					put(grammarAccess.getSystemDecAccess().getGroup(), "rule__SystemDec__Group__0");
					put(grammarAccess.getSystemPortInAccess().getGroup(), "rule__SystemPortIn__Group__0");
					put(grammarAccess.getSystemPortOutAccess().getGroup(), "rule__SystemPortOut__Group__0");
					put(grammarAccess.getComponentConnDecAccess().getGroup(), "rule__ComponentConnDec__Group__0");
					put(grammarAccess.getComponentImplAccess().getGroup(), "rule__ComponentImpl__Group__0");
					put(grammarAccess.getComponentTypeAccess().getGroup(), "rule__ComponentType__Group__0");
					put(grammarAccess.getPortInAccess().getGroup(), "rule__PortIn__Group__0");
					put(grammarAccess.getPortOutAccess().getGroup(), "rule__PortOut__Group__0");
					put(grammarAccess.getErrorModelDecAccess().getGroup(), "rule__ErrorModelDec__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getTransitionDecAccess().getGroup(), "rule__TransitionDec__Group__0");
					put(grammarAccess.getTransitionFeatureDecAccess().getGroup_3(), "rule__TransitionFeatureDec__Group_3__0");
					put(grammarAccess.getTransitionStateAccess().getGroup(), "rule__TransitionState__Group__0");
					put(grammarAccess.getTriggerAccess().getGroup(), "rule__Trigger__Group__0");
					put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
					put(grammarAccess.getDOUBLEAccess().getGroup(), "rule__DOUBLE__Group__0");
					put(grammarAccess.getDepModelAccess().getElementsAssignment(), "rule__DepModel__ElementsAssignment");
					put(grammarAccess.getPortTypeAccess().getNameAssignment_2(), "rule__PortType__NameAssignment_2");
					put(grammarAccess.getPortTypeAccess().getEModesAssignment_4(), "rule__PortType__EModesAssignment_4");
					put(grammarAccess.getErrorModesAccess().getNameAssignment_2(), "rule__ErrorModes__NameAssignment_2");
					put(grammarAccess.getSystemConnDecAccess().getNameAssignment_1(), "rule__SystemConnDec__NameAssignment_1");
					put(grammarAccess.getSystemConnDecAccess().getSourceSystemAssignment_3(), "rule__SystemConnDec__SourceSystemAssignment_3");
					put(grammarAccess.getSystemConnDecAccess().getSourcePortAssignment_5(), "rule__SystemConnDec__SourcePortAssignment_5");
					put(grammarAccess.getSystemConnDecAccess().getTargetSystemAssignment_7(), "rule__SystemConnDec__TargetSystemAssignment_7");
					put(grammarAccess.getSystemConnDecAccess().getTargetPortAssignment_9(), "rule__SystemConnDec__TargetPortAssignment_9");
					put(grammarAccess.getSystemDecAccess().getNameAssignment_1(), "rule__SystemDec__NameAssignment_1");
					put(grammarAccess.getSystemDecAccess().getSysFeaturesAssignment_3(), "rule__SystemDec__SysFeaturesAssignment_3");
					put(grammarAccess.getSystemPortInAccess().getNameAssignment_3(), "rule__SystemPortIn__NameAssignment_3");
					put(grammarAccess.getSystemPortInAccess().getInCompAssignment_5(), "rule__SystemPortIn__InCompAssignment_5");
					put(grammarAccess.getSystemPortInAccess().getInPortAssignment_7(), "rule__SystemPortIn__InPortAssignment_7");
					put(grammarAccess.getSystemPortOutAccess().getNameAssignment_3(), "rule__SystemPortOut__NameAssignment_3");
					put(grammarAccess.getSystemPortOutAccess().getOutCompAssignment_5(), "rule__SystemPortOut__OutCompAssignment_5");
					put(grammarAccess.getSystemPortOutAccess().getOutPortAssignment_7(), "rule__SystemPortOut__OutPortAssignment_7");
					put(grammarAccess.getComponentConnDecAccess().getNameAssignment_1(), "rule__ComponentConnDec__NameAssignment_1");
					put(grammarAccess.getComponentConnDecAccess().getSourceCompAssignment_3(), "rule__ComponentConnDec__SourceCompAssignment_3");
					put(grammarAccess.getComponentConnDecAccess().getSourcePortAssignment_5(), "rule__ComponentConnDec__SourcePortAssignment_5");
					put(grammarAccess.getComponentConnDecAccess().getTargetCompAssignment_7(), "rule__ComponentConnDec__TargetCompAssignment_7");
					put(grammarAccess.getComponentConnDecAccess().getTargetPortAssignment_9(), "rule__ComponentConnDec__TargetPortAssignment_9");
					put(grammarAccess.getComponentImplAccess().getNameAssignment_1(), "rule__ComponentImpl__NameAssignment_1");
					put(grammarAccess.getComponentImplAccess().getSuperTypeAssignment_3(), "rule__ComponentImpl__SuperTypeAssignment_3");
					put(grammarAccess.getComponentTypeAccess().getNameAssignment_2(), "rule__ComponentType__NameAssignment_2");
					put(grammarAccess.getComponentTypeAccess().getComponentFeaturesAssignment_4(), "rule__ComponentType__ComponentFeaturesAssignment_4");
					put(grammarAccess.getPortInAccess().getNameAssignment_2(), "rule__PortIn__NameAssignment_2");
					put(grammarAccess.getPortInAccess().getPortInSuperTypeAssignment_4(), "rule__PortIn__PortInSuperTypeAssignment_4");
					put(grammarAccess.getPortOutAccess().getNameAssignment_2(), "rule__PortOut__NameAssignment_2");
					put(grammarAccess.getPortOutAccess().getPortOutSuperTypeAssignment_4(), "rule__PortOut__PortOutSuperTypeAssignment_4");
					put(grammarAccess.getErrorModelDecAccess().getNameAssignment_2(), "rule__ErrorModelDec__NameAssignment_2");
					put(grammarAccess.getErrorModelDecAccess().getEmodelElementsAssignment_4(), "rule__ErrorModelDec__EmodelElementsAssignment_4");
					put(grammarAccess.getStateAccess().getNameAssignment_2(), "rule__State__NameAssignment_2");
					put(grammarAccess.getTransitionDecAccess().getNameAssignment_1(), "rule__TransitionDec__NameAssignment_1");
					put(grammarAccess.getTransitionDecAccess().getTransFeaturesAssignment_3(), "rule__TransitionDec__TransFeaturesAssignment_3");
					put(grammarAccess.getTransitionStateAccess().getSourceStateAssignment_1(), "rule__TransitionState__SourceStateAssignment_1");
					put(grammarAccess.getTransitionStateAccess().getTargetStateAssignment_3(), "rule__TransitionState__TargetStateAssignment_3");
					put(grammarAccess.getTriggerAccess().getPortInstanceAssignment_1(), "rule__Trigger__PortInstanceAssignment_1");
					put(grammarAccess.getTriggerAccess().getErrorModeAssignment_3(), "rule__Trigger__ErrorModeAssignment_3");
					put(grammarAccess.getActionAccess().getPortInstanceAssignment_1(), "rule__Action__PortInstanceAssignment_1");
					put(grammarAccess.getActionAccess().getErrorModeAssignment_3(), "rule__Action__ErrorModeAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalDepModelParser typedParser = (InternalDepModelParser) parser;
			typedParser.entryRuleDepModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DepModelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DepModelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
