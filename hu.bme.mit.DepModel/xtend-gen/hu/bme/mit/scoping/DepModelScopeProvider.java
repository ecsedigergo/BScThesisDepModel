/**
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.scoping;

import com.google.common.base.Objects;
import hu.bme.mit.depModel.DepModelPackage;
import hu.bme.mit.depModel.PortIn;
import hu.bme.mit.depModel.PortType;
import hu.bme.mit.scoping.AbstractDepModelScopeProvider;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class DepModelScopeProvider extends AbstractDepModelScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    boolean _and = false;
    if (!(context instanceof PortIn)) {
      _and = false;
    } else {
      boolean _equals = Objects.equal(reference, DepModelPackage.Literals.PORT_IN__PORT_IN_SUPER_TYPE);
      _and = _equals;
    }
    if (_and) {
      final EObject rootElement = EcoreUtil2.getRootContainer(context);
      final List<PortType> candidates_portType = EcoreUtil2.<PortType>getAllContentsOfType(rootElement, PortType.class);
      return Scopes.scopeFor(candidates_portType);
    }
    return super.getScope(context, reference);
  }
}
