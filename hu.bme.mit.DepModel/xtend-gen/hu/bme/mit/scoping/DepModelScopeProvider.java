/**
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.scoping;

import com.google.common.base.Objects;
import hu.bme.mit.depModel.Action;
import hu.bme.mit.depModel.ComponentConnDec;
import hu.bme.mit.depModel.ComponentImpl;
import hu.bme.mit.depModel.ComponentType;
import hu.bme.mit.depModel.DepModelPackage;
import hu.bme.mit.depModel.ErrorModes;
import hu.bme.mit.depModel.PortDec;
import hu.bme.mit.depModel.PortIn;
import hu.bme.mit.depModel.PortOut;
import hu.bme.mit.depModel.PortType;
import hu.bme.mit.depModel.SystemConnDec;
import hu.bme.mit.depModel.SystemDec;
import hu.bme.mit.depModel.SystemPortIn;
import hu.bme.mit.depModel.SystemPortOut;
import hu.bme.mit.depModel.Trigger;
import hu.bme.mit.scoping.AbstractDepModelScopeProvider;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class DepModelScopeProvider extends AbstractDepModelScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if ((context instanceof Trigger)) {
      final Trigger trigger = ((Trigger) context);
      boolean _equals = Objects.equal(reference, DepModelPackage.Literals.TRIGGER__PORT_INSTANCE);
      if (_equals) {
        final ComponentType compT = EcoreUtil2.<ComponentType>getContainerOfType(trigger, ComponentType.class);
        boolean _equals_1 = Objects.equal(compT, null);
        if (_equals_1) {
          return IScope.NULLSCOPE;
        }
        final List<PortIn> portI = EcoreUtil2.<PortIn>getAllContentsOfType(compT, PortIn.class);
        boolean _equals_2 = Objects.equal(portI, null);
        if (_equals_2) {
          return IScope.NULLSCOPE;
        }
        return Scopes.scopeFor(portI);
      }
      boolean _equals_3 = Objects.equal(reference, DepModelPackage.Literals.TRIGGER__ERROR_MODE);
      if (_equals_3) {
        PortDec _portInstance = trigger.getPortInstance();
        final PortIn portInImpl = EcoreUtil2.<PortIn>getContainerOfType(_portInstance, PortIn.class);
        boolean _equals_4 = Objects.equal(portInImpl, null);
        if (_equals_4) {
          return IScope.NULLSCOPE;
        }
        PortType _portInSuperType = portInImpl.getPortInSuperType();
        final List<ErrorModes> modes = EcoreUtil2.<ErrorModes>getAllContentsOfType(_portInSuperType, ErrorModes.class);
        boolean _equals_5 = Objects.equal(modes, null);
        if (_equals_5) {
          return IScope.NULLSCOPE;
        }
        return Scopes.scopeFor(modes);
      }
    }
    if ((context instanceof Action)) {
      final Action action = ((Action) context);
      boolean _equals_6 = Objects.equal(reference, DepModelPackage.Literals.ACTION__PORT_INSTANCE);
      if (_equals_6) {
        final ComponentType compT_1 = EcoreUtil2.<ComponentType>getContainerOfType(action, ComponentType.class);
        boolean _equals_7 = Objects.equal(compT_1, null);
        if (_equals_7) {
          return IScope.NULLSCOPE;
        }
        final List<PortOut> portI_1 = EcoreUtil2.<PortOut>getAllContentsOfType(compT_1, PortOut.class);
        boolean _equals_8 = Objects.equal(portI_1, null);
        if (_equals_8) {
          return IScope.NULLSCOPE;
        }
        return Scopes.scopeFor(portI_1);
      }
      boolean _equals_9 = Objects.equal(reference, DepModelPackage.Literals.ACTION__ERROR_MODE);
      if (_equals_9) {
        PortDec _portInstance_1 = action.getPortInstance();
        final PortOut portOutImpl = EcoreUtil2.<PortOut>getContainerOfType(_portInstance_1, PortOut.class);
        boolean _equals_10 = Objects.equal(portOutImpl, null);
        if (_equals_10) {
          return IScope.NULLSCOPE;
        }
        PortType _portOutSuperType = portOutImpl.getPortOutSuperType();
        final List<ErrorModes> modes_1 = EcoreUtil2.<ErrorModes>getAllContentsOfType(_portOutSuperType, ErrorModes.class);
        boolean _equals_11 = Objects.equal(modes_1, null);
        if (_equals_11) {
          return IScope.NULLSCOPE;
        }
        return Scopes.scopeFor(modes_1);
      }
    }
    if ((context instanceof ComponentConnDec)) {
      final ComponentConnDec conn = ((ComponentConnDec) context);
      boolean _equals_12 = Objects.equal(reference, DepModelPackage.Literals.COMPONENT_CONN_DEC__SOURCE_PORT);
      if (_equals_12) {
        ComponentImpl _sourceComp = conn.getSourceComp();
        final ComponentImpl compImpl = EcoreUtil2.<ComponentImpl>getContainerOfType(_sourceComp, ComponentImpl.class);
        boolean _equals_13 = Objects.equal(compImpl, null);
        if (_equals_13) {
          return IScope.NULLSCOPE;
        }
        final ComponentType compType = compImpl.getSuperType();
        final List<PortOut> portImpl = EcoreUtil2.<PortOut>getAllContentsOfType(compType, PortOut.class);
        boolean _equals_14 = Objects.equal(portImpl, null);
        if (_equals_14) {
          return IScope.NULLSCOPE;
        }
        return Scopes.scopeFor(portImpl);
      }
      boolean _equals_15 = Objects.equal(reference, DepModelPackage.Literals.COMPONENT_CONN_DEC__TARGET_PORT);
      if (_equals_15) {
        ComponentImpl _targetComp = conn.getTargetComp();
        final ComponentImpl compImpl_1 = EcoreUtil2.<ComponentImpl>getContainerOfType(_targetComp, ComponentImpl.class);
        boolean _equals_16 = Objects.equal(compImpl_1, null);
        if (_equals_16) {
          return IScope.NULLSCOPE;
        }
        final ComponentType compType_1 = compImpl_1.getSuperType();
        final List<PortIn> portImpl_1 = EcoreUtil2.<PortIn>getAllContentsOfType(compType_1, PortIn.class);
        boolean _equals_17 = Objects.equal(portImpl_1, null);
        if (_equals_17) {
          return IScope.NULLSCOPE;
        }
        return Scopes.scopeFor(portImpl_1);
      }
    }
    if ((context instanceof SystemPortIn)) {
      final SystemPortIn inPortDec = ((SystemPortIn) context);
      boolean _equals_18 = Objects.equal(reference, DepModelPackage.Literals.SYSTEM_PORT_IN__IN_PORT);
      if (_equals_18) {
        ComponentImpl _inComp = inPortDec.getInComp();
        final ComponentImpl compI = EcoreUtil2.<ComponentImpl>getContainerOfType(_inComp, ComponentImpl.class);
        boolean _equals_19 = Objects.equal(compI, null);
        if (_equals_19) {
          return IScope.NULLSCOPE;
        }
        final ComponentType compT_2 = compI.getSuperType();
        final List<PortIn> ports = EcoreUtil2.<PortIn>getAllContentsOfType(compT_2, PortIn.class);
        boolean _equals_20 = Objects.equal(ports, null);
        if (_equals_20) {
          return IScope.NULLSCOPE;
        }
        return Scopes.scopeFor(ports);
      }
    }
    if ((context instanceof SystemPortOut)) {
      final SystemPortOut inPortDec_1 = ((SystemPortOut) context);
      boolean _equals_21 = Objects.equal(reference, DepModelPackage.Literals.SYSTEM_PORT_OUT__OUT_PORT);
      if (_equals_21) {
        ComponentImpl _outComp = inPortDec_1.getOutComp();
        final ComponentImpl compI_1 = EcoreUtil2.<ComponentImpl>getContainerOfType(_outComp, ComponentImpl.class);
        boolean _equals_22 = Objects.equal(compI_1, null);
        if (_equals_22) {
          return IScope.NULLSCOPE;
        }
        final ComponentType compT_3 = compI_1.getSuperType();
        final List<PortOut> ports_1 = EcoreUtil2.<PortOut>getAllContentsOfType(compT_3, PortOut.class);
        boolean _equals_23 = Objects.equal(ports_1, null);
        if (_equals_23) {
          return IScope.NULLSCOPE;
        }
        return Scopes.scopeFor(ports_1);
      }
    }
    if ((context instanceof SystemConnDec)) {
      final SystemConnDec conn_1 = ((SystemConnDec) context);
      boolean _equals_24 = Objects.equal(reference, DepModelPackage.Literals.SYSTEM_CONN_DEC__SOURCE_PORT);
      if (_equals_24) {
        SystemDec _sourceSystem = conn_1.getSourceSystem();
        final SystemDec systemD = EcoreUtil2.<SystemDec>getContainerOfType(_sourceSystem, SystemDec.class);
        boolean _equals_25 = Objects.equal(systemD, null);
        if (_equals_25) {
          return IScope.NULLSCOPE;
        }
        final List<SystemPortOut> ports_2 = EcoreUtil2.<SystemPortOut>getAllContentsOfType(systemD, SystemPortOut.class);
        boolean _equals_26 = Objects.equal(ports_2, null);
        if (_equals_26) {
          return IScope.NULLSCOPE;
        }
        return Scopes.scopeFor(ports_2);
      }
    }
    if ((context instanceof SystemConnDec)) {
      final SystemConnDec conn_2 = ((SystemConnDec) context);
      boolean _equals_27 = Objects.equal(reference, DepModelPackage.Literals.SYSTEM_CONN_DEC__TARGET_PORT);
      if (_equals_27) {
        SystemDec _targetSystem = conn_2.getTargetSystem();
        final SystemDec systemD_1 = EcoreUtil2.<SystemDec>getContainerOfType(_targetSystem, SystemDec.class);
        boolean _equals_28 = Objects.equal(systemD_1, null);
        if (_equals_28) {
          return IScope.NULLSCOPE;
        }
        final List<SystemPortIn> ports_3 = EcoreUtil2.<SystemPortIn>getAllContentsOfType(systemD_1, SystemPortIn.class);
        boolean _equals_29 = Objects.equal(ports_3, null);
        if (_equals_29) {
          return IScope.NULLSCOPE;
        }
        return Scopes.scopeFor(ports_3);
      }
    }
    return super.getScope(context, reference);
  }
}
