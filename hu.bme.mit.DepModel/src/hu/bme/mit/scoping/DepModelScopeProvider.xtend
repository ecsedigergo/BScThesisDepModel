/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.scoping

import hu.bme.mit.depModel.DepModel
import hu.bme.mit.depModel.DepModelPackage
import hu.bme.mit.depModel.PortIn
import hu.bme.mit.depModel.PortOut
import hu.bme.mit.depModel.PortType
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import hu.bme.mit.depModel.AbstractElement

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DepModelScopeProvider extends AbstractDepModelScopeProvider {
	override getScope(EObject context, EReference reference) {
		if (context instanceof PortIn) {
			val portIn = context as PortIn
			if (reference == DepModelPackage.Literals.PORT_IN__PORT_IN_SUPER_TYPE) {
				val system = EcoreUtil2.getContainerOfType(portIn,DepModel)
				if (system == null) {
					return IScope.NULLSCOPE
				}
				val portType =  EcoreUtil2.getAllContentsOfType(system, PortType)
				print(portType)
				if (portType == null) {
					return IScope.NULLSCOPE
				}else{
					return Scopes.scopeFor(portType )
				}
			}
		}
		if (context instanceof PortOut) {
			val portOut = context as PortOut
			if (reference == DepModelPackage.Literals.PORT_OUT__PORT_OUT_SUPER_TYPE) {
				val system = EcoreUtil2.getRootContainer(portOut)
				if (system == null) {
					return IScope.NULLSCOPE
				}
				val portType =  EcoreUtil2.getAllContentsOfType(system, PortType)
				
				if (portType == null) {
					return IScope.NULLSCOPE
				}else{
					return Scopes.scopeFor(portType)
				}
			}
		}
		return super.getScope(context, reference)
	}
}
