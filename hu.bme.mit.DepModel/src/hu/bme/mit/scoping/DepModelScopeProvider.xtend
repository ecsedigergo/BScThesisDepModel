/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.scoping

import hu.bme.mit.depModel.DepModelPackage
import hu.bme.mit.depModel.PortIn
import hu.bme.mit.depModel.PortType
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DepModelScopeProvider extends AbstractDepModelScopeProvider {


	override getScope(EObject context, EReference reference) {
		if (context instanceof PortIn) {
			val port = context as PortIn
			if (reference == DepModelPackage.Literals.PORT_IN__PORT_IN_SUPER_TYPE) {
				val rootElement = EcoreUtil2.getRootContainer(port)
				val candidates_portType = EcoreUtil2.getAllContentsOfType(rootElement,PortType)
				//val ize = EcoreUtil2.getAllProperContents(candidates_portType,false)
				return Scopes.scopeFor(candidates_portType)
				
			}
		// val existingScope = Scopes.scopeFor(candidates_portType)
		// return new FilteringScope(existingScope, [getEObjectOrProxy != context])
		}
		return super.getScope(context, reference)
	}
//	override getScope(EObject context, EReference reference) {
//    if (context instanceof Element
//            && reference == MyDslPackage.Literals.ELEMENT__SUPER_ELEMENT) {
//        val rootElement = EcoreUtil2.getRootContainer(context)
//        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Element)
//        val existingScope = Scopes.scopeFor(candidates)
//        // Scope that filters out the context element from the candidates list
//        return new FilteringScope(existingScope, [getEObjectOrProxy != context])
//    }
//    return super.getScope(context, reference);
//}
}
