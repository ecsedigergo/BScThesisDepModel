/**
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.depModel.impl;

import hu.bme.mit.depModel.ComponentFeaturesDec;
import hu.bme.mit.depModel.ComponentType;
import hu.bme.mit.depModel.DepModelPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Component Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.depModel.impl.ComponentTypeImpl#getCompTypeName <em>Comp Type Name</em>}</li>
 *   <li>{@link hu.bme.mit.depModel.impl.ComponentTypeImpl#getComponentFeatures <em>Component Features</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComponentTypeImpl extends SysFeaturesDecImpl implements ComponentType
{
  /**
   * The default value of the '{@link #getCompTypeName() <em>Comp Type Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompTypeName()
   * @generated
   * @ordered
   */
  protected static final String COMP_TYPE_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCompTypeName() <em>Comp Type Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompTypeName()
   * @generated
   * @ordered
   */
  protected String compTypeName = COMP_TYPE_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getComponentFeatures() <em>Component Features</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponentFeatures()
   * @generated
   * @ordered
   */
  protected EList<ComponentFeaturesDec> componentFeatures;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DepModelPackage.Literals.COMPONENT_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCompTypeName()
  {
    return compTypeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompTypeName(String newCompTypeName)
  {
    String oldCompTypeName = compTypeName;
    compTypeName = newCompTypeName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DepModelPackage.COMPONENT_TYPE__COMP_TYPE_NAME, oldCompTypeName, compTypeName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ComponentFeaturesDec> getComponentFeatures()
  {
    if (componentFeatures == null)
    {
      componentFeatures = new EObjectContainmentEList<ComponentFeaturesDec>(ComponentFeaturesDec.class, this, DepModelPackage.COMPONENT_TYPE__COMPONENT_FEATURES);
    }
    return componentFeatures;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DepModelPackage.COMPONENT_TYPE__COMPONENT_FEATURES:
        return ((InternalEList<?>)getComponentFeatures()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DepModelPackage.COMPONENT_TYPE__COMP_TYPE_NAME:
        return getCompTypeName();
      case DepModelPackage.COMPONENT_TYPE__COMPONENT_FEATURES:
        return getComponentFeatures();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DepModelPackage.COMPONENT_TYPE__COMP_TYPE_NAME:
        setCompTypeName((String)newValue);
        return;
      case DepModelPackage.COMPONENT_TYPE__COMPONENT_FEATURES:
        getComponentFeatures().clear();
        getComponentFeatures().addAll((Collection<? extends ComponentFeaturesDec>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DepModelPackage.COMPONENT_TYPE__COMP_TYPE_NAME:
        setCompTypeName(COMP_TYPE_NAME_EDEFAULT);
        return;
      case DepModelPackage.COMPONENT_TYPE__COMPONENT_FEATURES:
        getComponentFeatures().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DepModelPackage.COMPONENT_TYPE__COMP_TYPE_NAME:
        return COMP_TYPE_NAME_EDEFAULT == null ? compTypeName != null : !COMP_TYPE_NAME_EDEFAULT.equals(compTypeName);
      case DepModelPackage.COMPONENT_TYPE__COMPONENT_FEATURES:
        return componentFeatures != null && !componentFeatures.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (CompTypeName: ");
    result.append(compTypeName);
    result.append(')');
    return result.toString();
  }

} //ComponentTypeImpl
