/**
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.depModel.impl;

import hu.bme.mit.depModel.DepModelPackage;
import hu.bme.mit.depModel.ErrorModes;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Error Modes</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.depModel.impl.ErrorModesImpl#getErrorModeName <em>Error Mode Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ErrorModesImpl extends MinimalEObjectImpl.Container implements ErrorModes
{
  /**
   * The default value of the '{@link #getErrorModeName() <em>Error Mode Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getErrorModeName()
   * @generated
   * @ordered
   */
  protected static final String ERROR_MODE_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getErrorModeName() <em>Error Mode Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getErrorModeName()
   * @generated
   * @ordered
   */
  protected String errorModeName = ERROR_MODE_NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ErrorModesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DepModelPackage.Literals.ERROR_MODES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getErrorModeName()
  {
    return errorModeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setErrorModeName(String newErrorModeName)
  {
    String oldErrorModeName = errorModeName;
    errorModeName = newErrorModeName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DepModelPackage.ERROR_MODES__ERROR_MODE_NAME, oldErrorModeName, errorModeName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DepModelPackage.ERROR_MODES__ERROR_MODE_NAME:
        return getErrorModeName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DepModelPackage.ERROR_MODES__ERROR_MODE_NAME:
        setErrorModeName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DepModelPackage.ERROR_MODES__ERROR_MODE_NAME:
        setErrorModeName(ERROR_MODE_NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DepModelPackage.ERROR_MODES__ERROR_MODE_NAME:
        return ERROR_MODE_NAME_EDEFAULT == null ? errorModeName != null : !ERROR_MODE_NAME_EDEFAULT.equals(errorModeName);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (ErrorModeName: ");
    result.append(errorModeName);
    result.append(')');
    return result.toString();
  }

} //ErrorModesImpl
