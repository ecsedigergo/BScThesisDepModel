/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DepModelGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DepModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.DepModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//DepModel:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentModelDecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPortTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComponentTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractElement:
		//	ComponentModelDec | PortType | ComponentType;
		@Override public ParserRule getRule() { return rule; }
		
		//ComponentModelDec | PortType | ComponentType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ComponentModelDec
		public RuleCall getComponentModelDecParserRuleCall_0() { return cComponentModelDecParserRuleCall_0; }
		
		//PortType
		public RuleCall getPortTypeParserRuleCall_1() { return cPortTypeParserRuleCall_1; }
		
		//ComponentType
		public RuleCall getComponentTypeParserRuleCall_2() { return cComponentTypeParserRuleCall_2; }
	}
	public class PortTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.PortType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEModesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEModesErrorModesParserRuleCall_4_0 = (RuleCall)cEModesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PortType:
		//	'port' 'type' name=QualifiedName '{' eModes+=ErrorModes* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'port' 'type' name=QualifiedName '{' eModes+=ErrorModes* '}'
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//'type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//eModes+=ErrorModes*
		public Assignment getEModesAssignment_4() { return cEModesAssignment_4; }
		
		//ErrorModes
		public RuleCall getEModesErrorModesParserRuleCall_4_0() { return cEModesErrorModesParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ErrorModesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.ErrorModes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ErrorModes:
		//	'error' 'mode' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'error' 'mode' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'error'
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }
		
		//'mode'
		public Keyword getModeKeyword_1() { return cModeKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
	}
	public class ComponentModelDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.ComponentModelDec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSystemConnDecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSystemDecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Component Model ********************************************************************
		// ComponentModelDec:
		//	SystemConnDec | SystemDec;
		@Override public ParserRule getRule() { return rule; }
		
		//SystemConnDec | SystemDec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SystemConnDec
		public RuleCall getSystemConnDecParserRuleCall_0() { return cSystemConnDecParserRuleCall_0; }
		
		//SystemDec
		public RuleCall getSystemDecParserRuleCall_1() { return cSystemDecParserRuleCall_1; }
	}
	public class SystemConnDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.SystemConnDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConnectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceSystemAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourceSystemSystemDecCrossReference_4_0 = (CrossReference)cSourceSystemAssignment_4.eContents().get(0);
		private final RuleCall cSourceSystemSystemDecIDTerminalRuleCall_4_0_1 = (RuleCall)cSourceSystemSystemDecCrossReference_4_0.eContents().get(1);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourcePortAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSourcePortSystemPortOutCrossReference_6_0 = (CrossReference)cSourcePortAssignment_6.eContents().get(0);
		private final RuleCall cSourcePortSystemPortOutIDTerminalRuleCall_6_0_1 = (RuleCall)cSourcePortSystemPortOutCrossReference_6_0.eContents().get(1);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetSystemAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTargetSystemSystemDecCrossReference_8_0 = (CrossReference)cTargetSystemAssignment_8.eContents().get(0);
		private final RuleCall cTargetSystemSystemDecIDTerminalRuleCall_8_0_1 = (RuleCall)cTargetSystemSystemDecCrossReference_8_0.eContents().get(1);
		private final Keyword cFullStopKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTargetPortAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cTargetPortSystemPortInCrossReference_10_0 = (CrossReference)cTargetPortAssignment_10.eContents().get(0);
		private final RuleCall cTargetPortSystemPortInIDTerminalRuleCall_10_0_1 = (RuleCall)cTargetPortSystemPortInCrossReference_10_0.eContents().get(1);
		
		//SystemConnDec:
		//	'system' 'connection' name=QualifiedName 'from' sourceSystem=[SystemDec] '.' sourcePort=[SystemPortOut] 'to'
		//	targetSystem=[SystemDec] '.' targetPort=[SystemPortIn];
		@Override public ParserRule getRule() { return rule; }
		
		//'system' 'connection' name=QualifiedName 'from' sourceSystem=[SystemDec] '.' sourcePort=[SystemPortOut] 'to'
		//targetSystem=[SystemDec] '.' targetPort=[SystemPortIn]
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//'connection'
		public Keyword getConnectionKeyword_1() { return cConnectionKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//sourceSystem=[SystemDec]
		public Assignment getSourceSystemAssignment_4() { return cSourceSystemAssignment_4; }
		
		//[SystemDec]
		public CrossReference getSourceSystemSystemDecCrossReference_4_0() { return cSourceSystemSystemDecCrossReference_4_0; }
		
		//ID
		public RuleCall getSourceSystemSystemDecIDTerminalRuleCall_4_0_1() { return cSourceSystemSystemDecIDTerminalRuleCall_4_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//sourcePort=[SystemPortOut]
		public Assignment getSourcePortAssignment_6() { return cSourcePortAssignment_6; }
		
		//[SystemPortOut]
		public CrossReference getSourcePortSystemPortOutCrossReference_6_0() { return cSourcePortSystemPortOutCrossReference_6_0; }
		
		//ID
		public RuleCall getSourcePortSystemPortOutIDTerminalRuleCall_6_0_1() { return cSourcePortSystemPortOutIDTerminalRuleCall_6_0_1; }
		
		//'to'
		public Keyword getToKeyword_7() { return cToKeyword_7; }
		
		//targetSystem=[SystemDec]
		public Assignment getTargetSystemAssignment_8() { return cTargetSystemAssignment_8; }
		
		//[SystemDec]
		public CrossReference getTargetSystemSystemDecCrossReference_8_0() { return cTargetSystemSystemDecCrossReference_8_0; }
		
		//ID
		public RuleCall getTargetSystemSystemDecIDTerminalRuleCall_8_0_1() { return cTargetSystemSystemDecIDTerminalRuleCall_8_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_9() { return cFullStopKeyword_9; }
		
		//targetPort=[SystemPortIn]
		public Assignment getTargetPortAssignment_10() { return cTargetPortAssignment_10; }
		
		//[SystemPortIn]
		public CrossReference getTargetPortSystemPortInCrossReference_10_0() { return cTargetPortSystemPortInCrossReference_10_0; }
		
		//ID
		public RuleCall getTargetPortSystemPortInIDTerminalRuleCall_10_0_1() { return cTargetPortSystemPortInIDTerminalRuleCall_10_0_1; }
	}
	public class SystemDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.SystemDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDeclarationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSysFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSysFeaturesSysFeaturesDecParserRuleCall_4_0 = (RuleCall)cSysFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SystemDec:
		//	'system' 'declaration' name=QualifiedName '{' sysFeatures+=SysFeaturesDec* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'system' 'declaration' name=QualifiedName '{' sysFeatures+=SysFeaturesDec* '}'
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//'declaration'
		public Keyword getDeclarationKeyword_1() { return cDeclarationKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//sysFeatures+=SysFeaturesDec*
		public Assignment getSysFeaturesAssignment_4() { return cSysFeaturesAssignment_4; }
		
		//SysFeaturesDec
		public RuleCall getSysFeaturesSysFeaturesDecParserRuleCall_4_0() { return cSysFeaturesSysFeaturesDecParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SysFeaturesDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.SysFeaturesDec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSystemPortDecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentConnDecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComponentImplParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SysFeaturesDec:
		//	SystemPortDec | ComponentConnDec | ComponentImpl;
		@Override public ParserRule getRule() { return rule; }
		
		//SystemPortDec | ComponentConnDec | ComponentImpl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SystemPortDec
		public RuleCall getSystemPortDecParserRuleCall_0() { return cSystemPortDecParserRuleCall_0; }
		
		//ComponentConnDec
		public RuleCall getComponentConnDecParserRuleCall_1() { return cComponentConnDecParserRuleCall_1; }
		
		//ComponentImpl
		public RuleCall getComponentImplParserRuleCall_2() { return cComponentImplParserRuleCall_2; }
	}
	public class SystemPortDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.SystemPortDec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSystemPortInParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSystemPortOutParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SystemPortDec:
		//	SystemPortIn | SystemPortOut;
		@Override public ParserRule getRule() { return rule; }
		
		//SystemPortIn | SystemPortOut
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SystemPortIn
		public RuleCall getSystemPortInParserRuleCall_0() { return cSystemPortInParserRuleCall_0; }
		
		//SystemPortOut
		public RuleCall getSystemPortOutParserRuleCall_1() { return cSystemPortOutParserRuleCall_1; }
	}
	public class SystemPortInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.SystemPortIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInCompAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cInCompComponentImplCrossReference_5_0 = (CrossReference)cInCompAssignment_5.eContents().get(0);
		private final RuleCall cInCompComponentImplIDTerminalRuleCall_5_0_1 = (RuleCall)cInCompComponentImplCrossReference_5_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cInPortAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cInPortPortInCrossReference_7_0 = (CrossReference)cInPortAssignment_7.eContents().get(0);
		private final RuleCall cInPortPortInIDTerminalRuleCall_7_0_1 = (RuleCall)cInPortPortInCrossReference_7_0.eContents().get(1);
		
		//SystemPortIn:
		//	'system' 'port' 'in' name=QualifiedName 'to' inComp=[ComponentImpl] '.' inPort=[PortIn];
		@Override public ParserRule getRule() { return rule; }
		
		//'system' 'port' 'in' name=QualifiedName 'to' inComp=[ComponentImpl] '.' inPort=[PortIn]
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//'port'
		public Keyword getPortKeyword_1() { return cPortKeyword_1; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0() { return cNameQualifiedNameParserRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//inComp=[ComponentImpl]
		public Assignment getInCompAssignment_5() { return cInCompAssignment_5; }
		
		//[ComponentImpl]
		public CrossReference getInCompComponentImplCrossReference_5_0() { return cInCompComponentImplCrossReference_5_0; }
		
		//ID
		public RuleCall getInCompComponentImplIDTerminalRuleCall_5_0_1() { return cInCompComponentImplIDTerminalRuleCall_5_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//inPort=[PortIn]
		public Assignment getInPortAssignment_7() { return cInPortAssignment_7; }
		
		//[PortIn]
		public CrossReference getInPortPortInCrossReference_7_0() { return cInPortPortInCrossReference_7_0; }
		
		//ID
		public RuleCall getInPortPortInIDTerminalRuleCall_7_0_1() { return cInPortPortInIDTerminalRuleCall_7_0_1; }
	}
	public class SystemPortOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.SystemPortOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOutKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cFromKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutCompAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cOutCompComponentImplCrossReference_5_0 = (CrossReference)cOutCompAssignment_5.eContents().get(0);
		private final RuleCall cOutCompComponentImplIDTerminalRuleCall_5_0_1 = (RuleCall)cOutCompComponentImplCrossReference_5_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutPortAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cOutPortPortOutCrossReference_7_0 = (CrossReference)cOutPortAssignment_7.eContents().get(0);
		private final RuleCall cOutPortPortOutIDTerminalRuleCall_7_0_1 = (RuleCall)cOutPortPortOutCrossReference_7_0.eContents().get(1);
		
		//SystemPortOut:
		//	'system' 'port' 'out' name=QualifiedName 'from' outComp=[ComponentImpl] '.' outPort=[PortOut];
		@Override public ParserRule getRule() { return rule; }
		
		//'system' 'port' 'out' name=QualifiedName 'from' outComp=[ComponentImpl] '.' outPort=[PortOut]
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//'port'
		public Keyword getPortKeyword_1() { return cPortKeyword_1; }
		
		//'out'
		public Keyword getOutKeyword_2() { return cOutKeyword_2; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0() { return cNameQualifiedNameParserRuleCall_3_0; }
		
		//'from'
		public Keyword getFromKeyword_4() { return cFromKeyword_4; }
		
		//outComp=[ComponentImpl]
		public Assignment getOutCompAssignment_5() { return cOutCompAssignment_5; }
		
		//[ComponentImpl]
		public CrossReference getOutCompComponentImplCrossReference_5_0() { return cOutCompComponentImplCrossReference_5_0; }
		
		//ID
		public RuleCall getOutCompComponentImplIDTerminalRuleCall_5_0_1() { return cOutCompComponentImplIDTerminalRuleCall_5_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//outPort=[PortOut]
		public Assignment getOutPortAssignment_7() { return cOutPortAssignment_7; }
		
		//[PortOut]
		public CrossReference getOutPortPortOutCrossReference_7_0() { return cOutPortPortOutCrossReference_7_0; }
		
		//ID
		public RuleCall getOutPortPortOutIDTerminalRuleCall_7_0_1() { return cOutPortPortOutIDTerminalRuleCall_7_0_1; }
	}
	public class ComponentConnDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.ComponentConnDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConnectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceCompAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourceCompComponentImplCrossReference_4_0 = (CrossReference)cSourceCompAssignment_4.eContents().get(0);
		private final RuleCall cSourceCompComponentImplIDTerminalRuleCall_4_0_1 = (RuleCall)cSourceCompComponentImplCrossReference_4_0.eContents().get(1);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourcePortAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSourcePortPortOutCrossReference_6_0 = (CrossReference)cSourcePortAssignment_6.eContents().get(0);
		private final RuleCall cSourcePortPortOutIDTerminalRuleCall_6_0_1 = (RuleCall)cSourcePortPortOutCrossReference_6_0.eContents().get(1);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetCompAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTargetCompComponentImplCrossReference_8_0 = (CrossReference)cTargetCompAssignment_8.eContents().get(0);
		private final RuleCall cTargetCompComponentImplIDTerminalRuleCall_8_0_1 = (RuleCall)cTargetCompComponentImplCrossReference_8_0.eContents().get(1);
		private final Keyword cFullStopKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTargetPortAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cTargetPortPortInCrossReference_10_0 = (CrossReference)cTargetPortAssignment_10.eContents().get(0);
		private final RuleCall cTargetPortPortInIDTerminalRuleCall_10_0_1 = (RuleCall)cTargetPortPortInCrossReference_10_0.eContents().get(1);
		
		//ComponentConnDec:
		//	'component' 'connection' name=QualifiedName 'from' sourceComp=[ComponentImpl] '.' sourcePort=[PortOut] 'to'
		//	targetComp=[ComponentImpl] '.' targetPort=[PortIn];
		@Override public ParserRule getRule() { return rule; }
		
		//'component' 'connection' name=QualifiedName 'from' sourceComp=[ComponentImpl] '.' sourcePort=[PortOut] 'to'
		//targetComp=[ComponentImpl] '.' targetPort=[PortIn]
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//'connection'
		public Keyword getConnectionKeyword_1() { return cConnectionKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//sourceComp=[ComponentImpl]
		public Assignment getSourceCompAssignment_4() { return cSourceCompAssignment_4; }
		
		//[ComponentImpl]
		public CrossReference getSourceCompComponentImplCrossReference_4_0() { return cSourceCompComponentImplCrossReference_4_0; }
		
		//ID
		public RuleCall getSourceCompComponentImplIDTerminalRuleCall_4_0_1() { return cSourceCompComponentImplIDTerminalRuleCall_4_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//sourcePort=[PortOut]
		public Assignment getSourcePortAssignment_6() { return cSourcePortAssignment_6; }
		
		//[PortOut]
		public CrossReference getSourcePortPortOutCrossReference_6_0() { return cSourcePortPortOutCrossReference_6_0; }
		
		//ID
		public RuleCall getSourcePortPortOutIDTerminalRuleCall_6_0_1() { return cSourcePortPortOutIDTerminalRuleCall_6_0_1; }
		
		//'to'
		public Keyword getToKeyword_7() { return cToKeyword_7; }
		
		//targetComp=[ComponentImpl]
		public Assignment getTargetCompAssignment_8() { return cTargetCompAssignment_8; }
		
		//[ComponentImpl]
		public CrossReference getTargetCompComponentImplCrossReference_8_0() { return cTargetCompComponentImplCrossReference_8_0; }
		
		//ID
		public RuleCall getTargetCompComponentImplIDTerminalRuleCall_8_0_1() { return cTargetCompComponentImplIDTerminalRuleCall_8_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_9() { return cFullStopKeyword_9; }
		
		//targetPort=[PortIn]
		public Assignment getTargetPortAssignment_10() { return cTargetPortAssignment_10; }
		
		//[PortIn]
		public CrossReference getTargetPortPortInCrossReference_10_0() { return cTargetPortPortInCrossReference_10_0; }
		
		//ID
		public RuleCall getTargetPortPortInIDTerminalRuleCall_10_0_1() { return cTargetPortPortInIDTerminalRuleCall_10_0_1; }
	}
	public class ComponentImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.ComponentImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cImplementationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSuperTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSuperTypeComponentTypeCrossReference_4_0 = (CrossReference)cSuperTypeAssignment_4.eContents().get(0);
		private final RuleCall cSuperTypeComponentTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cSuperTypeComponentTypeCrossReference_4_0.eContents().get(1);
		
		//ComponentImpl:
		//	'component' 'implementation' name=QualifiedName ':' superType=[ComponentType];
		@Override public ParserRule getRule() { return rule; }
		
		//'component' 'implementation' name=QualifiedName ':' superType=[ComponentType]
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//'implementation'
		public Keyword getImplementationKeyword_1() { return cImplementationKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//superType=[ComponentType]
		public Assignment getSuperTypeAssignment_4() { return cSuperTypeAssignment_4; }
		
		//[ComponentType]
		public CrossReference getSuperTypeComponentTypeCrossReference_4_0() { return cSuperTypeComponentTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getSuperTypeComponentTypeIDTerminalRuleCall_4_0_1() { return cSuperTypeComponentTypeIDTerminalRuleCall_4_0_1; }
	}
	public class ComponentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.ComponentType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cComponentFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComponentFeaturesComponentFeaturesDecParserRuleCall_4_0 = (RuleCall)cComponentFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ComponentType:
		//	'component' 'type' name=QualifiedName '{' componentFeatures+=ComponentFeaturesDec* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'component' 'type' name=QualifiedName '{' componentFeatures+=ComponentFeaturesDec* '}'
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//'type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//componentFeatures+=ComponentFeaturesDec*
		public Assignment getComponentFeaturesAssignment_4() { return cComponentFeaturesAssignment_4; }
		
		//ComponentFeaturesDec
		public RuleCall getComponentFeaturesComponentFeaturesDecParserRuleCall_4_0() { return cComponentFeaturesComponentFeaturesDecParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ComponentFeaturesDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.ComponentFeaturesDec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPortDecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cErrorModelDecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComponentFeaturesDec:
		//	PortDec | ErrorModelDec;
		@Override public ParserRule getRule() { return rule; }
		
		//PortDec | ErrorModelDec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PortDec
		public RuleCall getPortDecParserRuleCall_0() { return cPortDecParserRuleCall_0; }
		
		//ErrorModelDec
		public RuleCall getErrorModelDecParserRuleCall_1() { return cErrorModelDecParserRuleCall_1; }
	}
	public class PortDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.PortDec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPortInParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPortOutParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PortDec:
		//	PortIn | PortOut;
		@Override public ParserRule getRule() { return rule; }
		
		//PortIn | PortOut
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PortIn
		public RuleCall getPortInParserRuleCall_0() { return cPortInParserRuleCall_0; }
		
		//PortOut
		public RuleCall getPortOutParserRuleCall_1() { return cPortOutParserRuleCall_1; }
	}
	public class PortInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.PortIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInstanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPortInSuperTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cPortInSuperTypePortTypeCrossReference_5_0 = (CrossReference)cPortInSuperTypeAssignment_5.eContents().get(0);
		private final RuleCall cPortInSuperTypePortTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cPortInSuperTypePortTypeCrossReference_5_0.eContents().get(1);
		
		//PortIn:
		//	'port' 'instance' 'in' name=QualifiedName ':' PortInSuperType=[PortType];
		@Override public ParserRule getRule() { return rule; }
		
		//'port' 'instance' 'in' name=QualifiedName ':' PortInSuperType=[PortType]
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//'instance'
		public Keyword getInstanceKeyword_1() { return cInstanceKeyword_1; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0() { return cNameQualifiedNameParserRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//PortInSuperType=[PortType]
		public Assignment getPortInSuperTypeAssignment_5() { return cPortInSuperTypeAssignment_5; }
		
		//[PortType]
		public CrossReference getPortInSuperTypePortTypeCrossReference_5_0() { return cPortInSuperTypePortTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getPortInSuperTypePortTypeIDTerminalRuleCall_5_0_1() { return cPortInSuperTypePortTypeIDTerminalRuleCall_5_0_1; }
	}
	public class PortOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.PortOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInstanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOutKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPortOutSuperTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cPortOutSuperTypePortTypeCrossReference_5_0 = (CrossReference)cPortOutSuperTypeAssignment_5.eContents().get(0);
		private final RuleCall cPortOutSuperTypePortTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cPortOutSuperTypePortTypeCrossReference_5_0.eContents().get(1);
		
		//PortOut:
		//	'port' 'instance' 'out' name=QualifiedName ':' PortOutSuperType=[PortType];
		@Override public ParserRule getRule() { return rule; }
		
		//'port' 'instance' 'out' name=QualifiedName ':' PortOutSuperType=[PortType]
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//'instance'
		public Keyword getInstanceKeyword_1() { return cInstanceKeyword_1; }
		
		//'out'
		public Keyword getOutKeyword_2() { return cOutKeyword_2; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0() { return cNameQualifiedNameParserRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//PortOutSuperType=[PortType]
		public Assignment getPortOutSuperTypeAssignment_5() { return cPortOutSuperTypeAssignment_5; }
		
		//[PortType]
		public CrossReference getPortOutSuperTypePortTypeCrossReference_5_0() { return cPortOutSuperTypePortTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getPortOutSuperTypePortTypeIDTerminalRuleCall_5_0_1() { return cPortOutSuperTypePortTypeIDTerminalRuleCall_5_0_1; }
	}
	public class ErrorModelDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.ErrorModelDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEmodelElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEmodelElementsErrorModelElementParserRuleCall_4_0 = (RuleCall)cEmodelElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Error Model *********************************
		// ErrorModelDec:
		//	'error' 'model' name=QualifiedName '{' emodelElements+=ErrorModelElement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'error' 'model' name=QualifiedName '{' emodelElements+=ErrorModelElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'error'
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }
		
		//'model'
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//emodelElements+=ErrorModelElement*
		public Assignment getEmodelElementsAssignment_4() { return cEmodelElementsAssignment_4; }
		
		//ErrorModelElement
		public RuleCall getEmodelElementsErrorModelElementParserRuleCall_4_0() { return cEmodelElementsErrorModelElementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ErrorModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.ErrorModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransitionDecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ErrorModelElement:
		//	State | TransitionDec;
		@Override public ParserRule getRule() { return rule; }
		
		//State | TransitionDec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }
		
		//TransitionDec
		public RuleCall getTransitionDecParserRuleCall_1() { return cTransitionDecParserRuleCall_1; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cErrorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//State:
		//	'initial'? 'error' 'state' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'initial'? 'error' 'state' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'initial'?
		public Keyword getInitialKeyword_0() { return cInitialKeyword_0; }
		
		//'error'
		public Keyword getErrorKeyword_1() { return cErrorKeyword_1; }
		
		//'state'
		public Keyword getStateKeyword_2() { return cStateKeyword_2; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0() { return cNameQualifiedNameParserRuleCall_3_0; }
	}
	public class TransitionDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.TransitionDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTransFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransFeaturesTransitionFeatureDecParserRuleCall_3_0 = (RuleCall)cTransFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TransitionDec:
		//	'transition' name=QualifiedName '{' transFeatures+=TransitionFeatureDec* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'transition' name=QualifiedName '{' transFeatures+=TransitionFeatureDec* '}'
		public Group getGroup() { return cGroup; }
		
		//'transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//transFeatures+=TransitionFeatureDec*
		public Assignment getTransFeaturesAssignment_3() { return cTransFeaturesAssignment_3; }
		
		//TransitionFeatureDec
		public RuleCall getTransFeaturesTransitionFeatureDecParserRuleCall_3_0() { return cTransFeaturesTransitionFeatureDecParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TransitionFeatureDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.TransitionFeatureDec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTransitionStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTriggerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cOccurrenceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Action cOccurrenceAction_3_1 = (Action)cGroup_3.eContents().get(1);
		private final RuleCall cDOUBLEParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//TransitionFeatureDec:
		//	TransitionState | Trigger | Action | "occurrence" {Occurrence} DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//TransitionState | Trigger | Action | "occurrence" {Occurrence} DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TransitionState
		public RuleCall getTransitionStateParserRuleCall_0() { return cTransitionStateParserRuleCall_0; }
		
		//Trigger
		public RuleCall getTriggerParserRuleCall_1() { return cTriggerParserRuleCall_1; }
		
		//Action
		public RuleCall getActionParserRuleCall_2() { return cActionParserRuleCall_2; }
		
		//"occurrence" {Occurrence} DOUBLE
		public Group getGroup_3() { return cGroup_3; }
		
		//"occurrence"
		public Keyword getOccurrenceKeyword_3_0() { return cOccurrenceKeyword_3_0; }
		
		//{Occurrence}
		public Action getOccurrenceAction_3_1() { return cOccurrenceAction_3_1; }
		
		//DOUBLE
		public RuleCall getDOUBLEParserRuleCall_3_2() { return cDOUBLEParserRuleCall_3_2; }
	}
	public class TransitionStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.TransitionState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceStateStateCrossReference_1_0 = (CrossReference)cSourceStateAssignment_1.eContents().get(0);
		private final RuleCall cSourceStateStateIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceStateStateCrossReference_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetStateStateCrossReference_3_0 = (CrossReference)cTargetStateAssignment_3.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetStateStateCrossReference_3_0.eContents().get(1);
		
		//TransitionState:
		//	'states' sourceState=[State] '->' targetState=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//'states' sourceState=[State] '->' targetState=[State]
		public Group getGroup() { return cGroup; }
		
		//'states'
		public Keyword getStatesKeyword_0() { return cStatesKeyword_0; }
		
		//sourceState=[State]
		public Assignment getSourceStateAssignment_1() { return cSourceStateAssignment_1; }
		
		//[State]
		public CrossReference getSourceStateStateCrossReference_1_0() { return cSourceStateStateCrossReference_1_0; }
		
		//ID
		public RuleCall getSourceStateStateIDTerminalRuleCall_1_0_1() { return cSourceStateStateIDTerminalRuleCall_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//targetState=[State]
		public Assignment getTargetStateAssignment_3() { return cTargetStateAssignment_3; }
		
		//[State]
		public CrossReference getTargetStateStateCrossReference_3_0() { return cTargetStateStateCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_3_0_1() { return cTargetStateStateIDTerminalRuleCall_3_0_1; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortInstanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPortInstancePortDecCrossReference_3_0 = (CrossReference)cPortInstanceAssignment_3.eContents().get(0);
		private final RuleCall cPortInstancePortDecIDTerminalRuleCall_3_0_1 = (RuleCall)cPortInstancePortDecCrossReference_3_0.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cErrorModeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cErrorModeErrorModesCrossReference_5_0 = (CrossReference)cErrorModeAssignment_5.eContents().get(0);
		private final RuleCall cErrorModeErrorModesIDTerminalRuleCall_5_0_1 = (RuleCall)cErrorModeErrorModesCrossReference_5_0.eContents().get(1);
		
		//Trigger:
		//	'trigger' name=QualifiedName ':' portInstance=[PortDec] '.' errorMode=[ErrorModes];
		@Override public ParserRule getRule() { return rule; }
		
		//'trigger' name=QualifiedName ':' portInstance=[PortDec] '.' errorMode=[ErrorModes]
		public Group getGroup() { return cGroup; }
		
		//'trigger'
		public Keyword getTriggerKeyword_0() { return cTriggerKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//portInstance=[PortDec]
		public Assignment getPortInstanceAssignment_3() { return cPortInstanceAssignment_3; }
		
		//[PortDec]
		public CrossReference getPortInstancePortDecCrossReference_3_0() { return cPortInstancePortDecCrossReference_3_0; }
		
		//ID
		public RuleCall getPortInstancePortDecIDTerminalRuleCall_3_0_1() { return cPortInstancePortDecIDTerminalRuleCall_3_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//errorMode=[ErrorModes]
		public Assignment getErrorModeAssignment_5() { return cErrorModeAssignment_5; }
		
		//[ErrorModes]
		public CrossReference getErrorModeErrorModesCrossReference_5_0() { return cErrorModeErrorModesCrossReference_5_0; }
		
		//ID
		public RuleCall getErrorModeErrorModesIDTerminalRuleCall_5_0_1() { return cErrorModeErrorModesIDTerminalRuleCall_5_0_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortInstanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPortInstancePortDecCrossReference_3_0 = (CrossReference)cPortInstanceAssignment_3.eContents().get(0);
		private final RuleCall cPortInstancePortDecIDTerminalRuleCall_3_0_1 = (RuleCall)cPortInstancePortDecCrossReference_3_0.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cErrorModeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cErrorModeErrorModesCrossReference_5_0 = (CrossReference)cErrorModeAssignment_5.eContents().get(0);
		private final RuleCall cErrorModeErrorModesIDTerminalRuleCall_5_0_1 = (RuleCall)cErrorModeErrorModesCrossReference_5_0.eContents().get(1);
		
		//Action:
		//	'action' name=QualifiedName ':' portInstance=[PortDec] '.' errorMode=[ErrorModes];
		@Override public ParserRule getRule() { return rule; }
		
		//'action' name=QualifiedName ':' portInstance=[PortDec] '.' errorMode=[ErrorModes]
		public Group getGroup() { return cGroup; }
		
		//'action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//portInstance=[PortDec]
		public Assignment getPortInstanceAssignment_3() { return cPortInstanceAssignment_3; }
		
		//[PortDec]
		public CrossReference getPortInstancePortDecCrossReference_3_0() { return cPortInstancePortDecCrossReference_3_0; }
		
		//ID
		public RuleCall getPortInstancePortDecIDTerminalRuleCall_3_0_1() { return cPortInstancePortDecIDTerminalRuleCall_3_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//errorMode=[ErrorModes]
		public Assignment getErrorModeAssignment_5() { return cErrorModeAssignment_5; }
		
		//[ErrorModes]
		public CrossReference getErrorModeErrorModesCrossReference_5_0() { return cErrorModeErrorModesCrossReference_5_0; }
		
		//ID
		public RuleCall getErrorModeErrorModesIDTerminalRuleCall_5_0_1() { return cErrorModeErrorModesIDTerminalRuleCall_5_0_1; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.DepModel.DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DOUBLE:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	private final DepModelElements pDepModel;
	private final QualifiedNameElements pQualifiedName;
	private final AbstractElementElements pAbstractElement;
	private final PortTypeElements pPortType;
	private final ErrorModesElements pErrorModes;
	private final ComponentModelDecElements pComponentModelDec;
	private final SystemConnDecElements pSystemConnDec;
	private final SystemDecElements pSystemDec;
	private final SysFeaturesDecElements pSysFeaturesDec;
	private final SystemPortDecElements pSystemPortDec;
	private final SystemPortInElements pSystemPortIn;
	private final SystemPortOutElements pSystemPortOut;
	private final ComponentConnDecElements pComponentConnDec;
	private final ComponentImplElements pComponentImpl;
	private final ComponentTypeElements pComponentType;
	private final ComponentFeaturesDecElements pComponentFeaturesDec;
	private final PortDecElements pPortDec;
	private final PortInElements pPortIn;
	private final PortOutElements pPortOut;
	private final ErrorModelDecElements pErrorModelDec;
	private final ErrorModelElementElements pErrorModelElement;
	private final StateElements pState;
	private final TransitionDecElements pTransitionDec;
	private final TransitionFeatureDecElements pTransitionFeatureDec;
	private final TransitionStateElements pTransitionState;
	private final TriggerElements pTrigger;
	private final ActionElements pAction;
	private final DOUBLEElements pDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DepModelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDepModel = new DepModelElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pPortType = new PortTypeElements();
		this.pErrorModes = new ErrorModesElements();
		this.pComponentModelDec = new ComponentModelDecElements();
		this.pSystemConnDec = new SystemConnDecElements();
		this.pSystemDec = new SystemDecElements();
		this.pSysFeaturesDec = new SysFeaturesDecElements();
		this.pSystemPortDec = new SystemPortDecElements();
		this.pSystemPortIn = new SystemPortInElements();
		this.pSystemPortOut = new SystemPortOutElements();
		this.pComponentConnDec = new ComponentConnDecElements();
		this.pComponentImpl = new ComponentImplElements();
		this.pComponentType = new ComponentTypeElements();
		this.pComponentFeaturesDec = new ComponentFeaturesDecElements();
		this.pPortDec = new PortDecElements();
		this.pPortIn = new PortInElements();
		this.pPortOut = new PortOutElements();
		this.pErrorModelDec = new ErrorModelDecElements();
		this.pErrorModelElement = new ErrorModelElementElements();
		this.pState = new StateElements();
		this.pTransitionDec = new TransitionDecElements();
		this.pTransitionFeatureDec = new TransitionFeatureDecElements();
		this.pTransitionState = new TransitionStateElements();
		this.pTrigger = new TriggerElements();
		this.pAction = new ActionElements();
		this.pDOUBLE = new DOUBLEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.DepModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DepModel:
	//	elements+=AbstractElement*;
	public DepModelElements getDepModelAccess() {
		return pDepModel;
	}
	
	public ParserRule getDepModelRule() {
		return getDepModelAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//AbstractElement:
	//	ComponentModelDec | PortType | ComponentType;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//PortType:
	//	'port' 'type' name=QualifiedName '{' eModes+=ErrorModes* '}';
	public PortTypeElements getPortTypeAccess() {
		return pPortType;
	}
	
	public ParserRule getPortTypeRule() {
		return getPortTypeAccess().getRule();
	}
	
	//ErrorModes:
	//	'error' 'mode' name=QualifiedName;
	public ErrorModesElements getErrorModesAccess() {
		return pErrorModes;
	}
	
	public ParserRule getErrorModesRule() {
		return getErrorModesAccess().getRule();
	}
	
	////Component Model ********************************************************************
	// ComponentModelDec:
	//	SystemConnDec | SystemDec;
	public ComponentModelDecElements getComponentModelDecAccess() {
		return pComponentModelDec;
	}
	
	public ParserRule getComponentModelDecRule() {
		return getComponentModelDecAccess().getRule();
	}
	
	//SystemConnDec:
	//	'system' 'connection' name=QualifiedName 'from' sourceSystem=[SystemDec] '.' sourcePort=[SystemPortOut] 'to'
	//	targetSystem=[SystemDec] '.' targetPort=[SystemPortIn];
	public SystemConnDecElements getSystemConnDecAccess() {
		return pSystemConnDec;
	}
	
	public ParserRule getSystemConnDecRule() {
		return getSystemConnDecAccess().getRule();
	}
	
	//SystemDec:
	//	'system' 'declaration' name=QualifiedName '{' sysFeatures+=SysFeaturesDec* '}';
	public SystemDecElements getSystemDecAccess() {
		return pSystemDec;
	}
	
	public ParserRule getSystemDecRule() {
		return getSystemDecAccess().getRule();
	}
	
	//SysFeaturesDec:
	//	SystemPortDec | ComponentConnDec | ComponentImpl;
	public SysFeaturesDecElements getSysFeaturesDecAccess() {
		return pSysFeaturesDec;
	}
	
	public ParserRule getSysFeaturesDecRule() {
		return getSysFeaturesDecAccess().getRule();
	}
	
	//SystemPortDec:
	//	SystemPortIn | SystemPortOut;
	public SystemPortDecElements getSystemPortDecAccess() {
		return pSystemPortDec;
	}
	
	public ParserRule getSystemPortDecRule() {
		return getSystemPortDecAccess().getRule();
	}
	
	//SystemPortIn:
	//	'system' 'port' 'in' name=QualifiedName 'to' inComp=[ComponentImpl] '.' inPort=[PortIn];
	public SystemPortInElements getSystemPortInAccess() {
		return pSystemPortIn;
	}
	
	public ParserRule getSystemPortInRule() {
		return getSystemPortInAccess().getRule();
	}
	
	//SystemPortOut:
	//	'system' 'port' 'out' name=QualifiedName 'from' outComp=[ComponentImpl] '.' outPort=[PortOut];
	public SystemPortOutElements getSystemPortOutAccess() {
		return pSystemPortOut;
	}
	
	public ParserRule getSystemPortOutRule() {
		return getSystemPortOutAccess().getRule();
	}
	
	//ComponentConnDec:
	//	'component' 'connection' name=QualifiedName 'from' sourceComp=[ComponentImpl] '.' sourcePort=[PortOut] 'to'
	//	targetComp=[ComponentImpl] '.' targetPort=[PortIn];
	public ComponentConnDecElements getComponentConnDecAccess() {
		return pComponentConnDec;
	}
	
	public ParserRule getComponentConnDecRule() {
		return getComponentConnDecAccess().getRule();
	}
	
	//ComponentImpl:
	//	'component' 'implementation' name=QualifiedName ':' superType=[ComponentType];
	public ComponentImplElements getComponentImplAccess() {
		return pComponentImpl;
	}
	
	public ParserRule getComponentImplRule() {
		return getComponentImplAccess().getRule();
	}
	
	//ComponentType:
	//	'component' 'type' name=QualifiedName '{' componentFeatures+=ComponentFeaturesDec* '}';
	public ComponentTypeElements getComponentTypeAccess() {
		return pComponentType;
	}
	
	public ParserRule getComponentTypeRule() {
		return getComponentTypeAccess().getRule();
	}
	
	//ComponentFeaturesDec:
	//	PortDec | ErrorModelDec;
	public ComponentFeaturesDecElements getComponentFeaturesDecAccess() {
		return pComponentFeaturesDec;
	}
	
	public ParserRule getComponentFeaturesDecRule() {
		return getComponentFeaturesDecAccess().getRule();
	}
	
	//PortDec:
	//	PortIn | PortOut;
	public PortDecElements getPortDecAccess() {
		return pPortDec;
	}
	
	public ParserRule getPortDecRule() {
		return getPortDecAccess().getRule();
	}
	
	//PortIn:
	//	'port' 'instance' 'in' name=QualifiedName ':' PortInSuperType=[PortType];
	public PortInElements getPortInAccess() {
		return pPortIn;
	}
	
	public ParserRule getPortInRule() {
		return getPortInAccess().getRule();
	}
	
	//PortOut:
	//	'port' 'instance' 'out' name=QualifiedName ':' PortOutSuperType=[PortType];
	public PortOutElements getPortOutAccess() {
		return pPortOut;
	}
	
	public ParserRule getPortOutRule() {
		return getPortOutAccess().getRule();
	}
	
	////Error Model *********************************
	// ErrorModelDec:
	//	'error' 'model' name=QualifiedName '{' emodelElements+=ErrorModelElement* '}';
	public ErrorModelDecElements getErrorModelDecAccess() {
		return pErrorModelDec;
	}
	
	public ParserRule getErrorModelDecRule() {
		return getErrorModelDecAccess().getRule();
	}
	
	//ErrorModelElement:
	//	State | TransitionDec;
	public ErrorModelElementElements getErrorModelElementAccess() {
		return pErrorModelElement;
	}
	
	public ParserRule getErrorModelElementRule() {
		return getErrorModelElementAccess().getRule();
	}
	
	//State:
	//	'initial'? 'error' 'state' name=QualifiedName;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//TransitionDec:
	//	'transition' name=QualifiedName '{' transFeatures+=TransitionFeatureDec* '}';
	public TransitionDecElements getTransitionDecAccess() {
		return pTransitionDec;
	}
	
	public ParserRule getTransitionDecRule() {
		return getTransitionDecAccess().getRule();
	}
	
	//TransitionFeatureDec:
	//	TransitionState | Trigger | Action | "occurrence" {Occurrence} DOUBLE;
	public TransitionFeatureDecElements getTransitionFeatureDecAccess() {
		return pTransitionFeatureDec;
	}
	
	public ParserRule getTransitionFeatureDecRule() {
		return getTransitionFeatureDecAccess().getRule();
	}
	
	//TransitionState:
	//	'states' sourceState=[State] '->' targetState=[State];
	public TransitionStateElements getTransitionStateAccess() {
		return pTransitionState;
	}
	
	public ParserRule getTransitionStateRule() {
		return getTransitionStateAccess().getRule();
	}
	
	//Trigger:
	//	'trigger' name=QualifiedName ':' portInstance=[PortDec] '.' errorMode=[ErrorModes];
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//Action:
	//	'action' name=QualifiedName ':' portInstance=[PortDec] '.' errorMode=[ErrorModes];
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//DOUBLE:
	//	INT '.' INT;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
